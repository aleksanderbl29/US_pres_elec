---
title: Our choice of Sociodemographics
authors:
  - Aleksander Bang-Larsen
  - Christoffer Toft Sigh
  - Matias Pedersen
  - Michael Potter
  - Nathalie Mortensen
format: 
  revealjs: 
    theme: default
---

## Load the data and pkgs

- Packages

```{r pkgs}
#| echo: true
library(tidyverse)
library(corrplot)
library(cowplot)
library(mapdata)
library(usdata)
library(patchwork)
```

- Data

```{r load-data}
#| echo: true
#| code-line-numbers: "1-2"
dataset_file <- "../../6 - Sociodemographics/States.Rda"
load(dataset_file)

updated_dataset_file <- "../../6 - Sociodemographics/ACS_2023.Rda"
load(updated_dataset_file)
```

## Merge our data

```{r}
#| echo: true
library(readxl)
gender_file <- "../../6 - Sociodemographics/Gender.xlsx"
Gender <- read_excel(gender_file)

states_1 <- subset(States, select = c(state_name, state))

Gender_with_abbr <- Gender %>% 
  left_join(states_1, by = "state_name") %>% 
  rename(Gender_ratio = `Sex ratio (males per 100 females)`)

gender_done <- subset(Gender_with_abbr, select = c(state, Gender_ratio))

ACS_2023_merged <- States %>% 
  left_join(gender_done, by = "state") %>% 
  mutate(Gender_ratio = as.numeric(Gender_ratio))

#Change dataset
States <- ACS_2023_merged %>%
  # rename(pct_white_evangel = white_evangel_pct,
  #        pop = pop_total) %>%
  mutate(state_name = usdata::abbr2state(state))

urban_file <- "../../6 - Sociodemographics/State_Urban_Rural_Pop_2020_2010.xlsx" 
urban_data <- read_excel(urban_file) %>% 
  janitor::clean_names() %>% 
  select(state_abbrev, state_name, x2020_pct_urban_pop)

States <- States %>% 
  left_join(urban_data, by = c("state" = "state_abbrev",
                               "state_name" = "state_name")) %>% 
  filter(state != "DC")
```


## Plot data

```{r}
#| output: false
plt <- wesanderson::wes_palette("Chevalier1")
```


```{r}
xvar_names <- c(
  "state" = "State",
  "total_votes" = "Total Votes",
  "dem" = "Democratic Votes",
  "rep" = "Republican Votes",
  "other" = "Votes for other candidates",
  "state_fips" = "State FIPS", 
  "pop" = "Population",
  "white_pct" = "Pct of whites",
  "black_pct" = "Pct of blacks",
  "hisp_other_pct" = "Hispanics and others",
  "college_pct" = "Pct of college in pop",
  "wwc_pct" = "White working class pct",
  "median_age" = "Median Age",
  "pop_density" = "Population density",
  "pct_white_evangel" = "Percentage of white evangelists",
  "state_name" = "State name",
  "Gender_ratio" = "Gender Ratio",
  "x2020_pct_urban_pop" = "Pct Urban Population"
)
```

```{r}
plot_sociodem <- function(xvar, w_label = FALSE, df) {
  x_title = xvar_names[xvar]
  States <- df
  States %>%
    ggplot(aes(x = !!sym(xvar), y = dem)) +
    geom_point(color = plt[1]) +
    geom_smooth(method = "lm", color = plt[2]) +
    labs(x = x_title,
         y = "Democratic vote") +
    theme_minimal()
}
```

```{r}
printed_plot <- lapply(colnames(States), plot_sociodem, df = States)
wrap_plots(printed_plot) +
  plot_layout(axis_titles = "collect")
```

## Select relevant factors

```{r}
#| echo: true
#| code-line-numbers: "|1-2,5-13"

subset_of_vars <- States %>% 
  select(
    dem,
    rep,
    white_pct,
    black_pct,
    hisp_other_pct,
    college_pct,
    pct_white_evangel,
    Gender_ratio,
    x2020_pct_urban_pop,
    wwc_pct
  )
```

## Plot only relevant factors

```{r}
printed_plot <- lapply(colnames(subset_of_vars), plot_sociodem, df = subset_of_vars)
wrap_plots(printed_plot[-c(1,2)]) +
  plot_layout(axis_titles = "collect") &
  cowplot::theme_cowplot()
```

## Select data and give proper names

```{r}
#| echo: true
#| code-line-numbers: "1-3|5-10"
corrplot_data <- States %>% 
    select(white_pct, black_pct, dem, rep, hisp_other_pct, college_pct, pct_white_evangel,
         Gender_ratio, x2020_pct_urban_pop, wwc_pct) %>% 
  select(order(colnames(.))) # Sort columns alphabetically

colnames(corrplot_data) <- c(
  "Black", "College", "Democrat", "Gender Ratio",
  "Other", "White evang", "Republican", "White",
  "White Working Class", "Urban pct population"
)
```

## Corrplot

```{r}
#| echo: false
corrplot_data %>%
  cor(use = 'complete.obs') %>% # Casewise remove NAs
  corrplot(type = "upper", order = "original",
           tl.col = "black", tl.srt = 45)
```

# Maps

```{r create-correlations}
# Create new dataset with only the selected vars
subset <- States %>%
  filter(!is.na(state)) %>%
  arrange(state) %>%
  # select(state, dem, other, pct_white_evangel, pop,
  #        #average_log_pop_within_5_miles,
  #        white_pct, black_pct,
  #        hisp_other_pct, college_pct, median_age) %>%
  select(c(state, pct_white_evangel, average_log_pop_within_5_miles, white_pct,
           black_pct, hisp_other_pct, college_pct, median_age, wwc_pct)) %>%
  pivot_longer(cols = -state, names_to = "variable", values_to = "value") %>%
  filter(!is.na(value)) %>%
  arrange(state, variable)

# Rescale each variable using min-max scaling.
subset_min_max <- subset %>%
  group_by(variable) %>%
  mutate(value = (value - min(value, na.rm = TRUE)) /
           (max(value, na.rm = TRUE) - min(value, na.rm = TRUE))) %>%
  ungroup()

# Convert the dataframe from long to wide format, where each row is a variable, each
# column is a state, and each cell is a rescaled value.
subset_wide <- subset_min_max %>%
  pivot_wider(names_from = state, values_from = value) # %>% select(-variable)

# Calculate between-state correlations, and map correlations (use Illinois as a reference
# state). Hint: you can use the maps package, and run the command
# (usmap <- map_data("state")) to get state coordinates

usmap <- map_data("state")

names <- States %>%
  mutate(region = tolower(state_name)) %>%
  rename(abbr = state) %>%
  select(abbr, region)

# Calculate state correlations for all states
correlations <- subset_wide %>%
  select(-variable) %>%
  cor() %>%
  as_tibble() %>%
  mutate(state = colnames(.)) %>%
  relocate(state, .before = AK)
```

## Correlation with Illinois

```{r}
correlations_il <- correlations %>%
  mutate(IL = NA) %>%
  pivot_longer(cols = -state, names_to = "abbr", values_to = "cor") %>%
  filter(state == "IL") %>%
  left_join(names)

# Merge correlation data with map data
map_data_il <- usmap %>%
  filter(region %in% correlations_il$region) %>%
  left_join(correlations_il, by = "region")

# Plot the map
ggplot(map_data_il, aes(long, lat, group = group, fill = cor)) +
  geom_polygon(color = "black") +
  scale_fill_gradient2(low = "red", high = "lightgreen", mid = "white",
                       midpoint = 0, limits = c(-1, 1)) +
  theme_minimal() +
  labs(fill = "Correlation")
```

## Correlation with Texas

```{r}
correlations_tx <- correlations %>%
  mutate(TX = NA) %>%
  pivot_longer(cols = -state, names_to = "abbr", values_to = "cor") %>%
  filter(state == "TX") %>%
  left_join(names)

# Merge correlation data with map data
map_data_tx <- usmap %>%
  filter(region %in% correlations_tx$region) %>%
  left_join(correlations_tx, by = "region")

# Plot the map
ggplot(map_data_tx, aes(long, lat, group = group, fill = cor)) +
  geom_polygon(color = "black") +
  scale_fill_gradient2(low = "red", high = "lightgreen", mid = "white",
                       midpoint = 0, limits = c(-1, 1)) +
  theme_minimal() +
  labs(fill = "Correlation")
```

## Correlation with New York

```{r}
correlations_ny <- correlations %>%
  mutate(NY = NA) %>%
  pivot_longer(cols = -state, names_to = "abbr", values_to = "cor") %>%
  filter(state == "NY") %>%
  left_join(names)

# Merge correlation data with map data
map_data_ny <- usmap %>%
  filter(region %in% correlations_ny$region) %>%
  left_join(correlations_ny, by = "region")

# Plot the map
ggplot(map_data_ny, aes(long, lat, group = group, fill = cor)) +
  geom_polygon(color = "black") +
  scale_fill_gradient2(low = "red", high = "lightgreen", mid = "white",
                       midpoint = 0, limits = c(-1, 1)) +
  theme_minimal() +
  labs(fill = "Correlation")
```


